#+STARTUP:
** 基本設定
*** 本当の基本設定
#+BEGIN_SRC emacs-lisp
;;; init.el:
(when (< emacs-major-version 23)
  (defvar user-emacs-directory "~/.emacs.d/"))

; システムに装飾キー渡さない
(setq mac-pass-control-to-system nil)
(setq mac-pass-command-to-system nil)
(setq mac-pass-option-to-system nil)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)
(setq create-lockfiles nil)
#+end_src
*** C-tでバッファを切り変える
#+begin_src emacs-lisp
(define-key global-map (kbd "C-t") 'other-window)
#+end_src
*** C-x C-cでEmacsを終了しない
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c") 'magit)
(global-set-key (kbd "C-x C-z") 'your-favorite-command)
;; I never use C-x C-c
(defalias 'exit 'save-buffers-kill-emacs)
#+end_src
*** 何かサーバーが動くらしい
行番号を表示しない、スクロールバーを表示しない、時間を24時間フォーマットで表示する
#+begin_src emacs-lisp
(server-start)
(column-number-mode -1)
(scroll-bar-mode -1)
(size-indication-mode t)
(setq display-time-24hr-format t)
(display-time-mode t)
#+end_src
*** 日本語にする
文字コードはutf-8
#+begin_src emacs-lisp
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(setq frame-title-format "%f")
#+end_src
*** タブは4文字
#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src
*** フォントはMenloを使用する
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "udev-gothic"
                    :height 200)
#+end_src
*** 中間ファイルを生成しない(はず)
#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*".,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory)))
#+end_src

#+begin_src emacs-lisp
(global-auto-revert-mode t)

(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

*** M-*をmacのcommandキーにマップする
#+begin_src emacs-lisp
(setq mac-command-modifier 'meta)
#+end_src

*** yes or noをy、nにする
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          #'(lambda ()
              (fset 'yes-or-no-p 'y-or-n-p)))
#+end_src

*** Native Comp周りの設定
#+begin_src emacs-lisp
(with-eval-after-load 'comp-run
  ;; config
  (setopt native-comp-async-jobs-number 8)
  (setopt native-comp-speed 3)
  (setopt native-comp-always-compile t))

(with-eval-after-load 'warnings
  ;; config
  (setopt warning-suppress-types '((comp))))

(defun emacs-lisp-mode-hooks ()
  "list-mode-hooks"
  (when (require 'eldoc nil t)
    (setq eldoc-idle-delay 0.2)
    (setq eldoc-echo-area-use-multiline-p t)
    (turn-on-eldoc-mode)))
(add-hook 'emacs-lisp-mode-hook 'emacs-lisp-mode-hooks)
#+end_src

*** 環境変数の設定
#+begin_src emacs-lisp
;; load environment value
(dolist (path (reverse (split-string (getenv "PATH") ":")))
  (add-to-list 'exec-path path))
#+end_src

*** シェルの設定
#+begin_src emacs-lisp
(setq-default shell-file-name
              (expand-file-name "~/.nix-profile/bin/fish"))
(setq-default sh-shell-file
              (expand-file-name "~/.nix-profile/bin/fish"))
#+end_src

*** Melpaの設定
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

*** reload init.el
#+begin_src emacs-lisp
(defun reload-init-file ()
  "reload init.el"
  (interactive)
  (load-file (format "%s/.emacs.d/init.el" (getenv "HOME"))))
#+end_src

** Utils

*** moccur
#+begin_src emacs-lisp
(defadvice moccur-edit-change-file
    (after save-after-moccur-edit-buffer activate)
  (save-buffer))
#+end_src

*** theme(catppuccin-theme)
#+begin_src emacs-lisp
(require 'catppuccin-theme)
(setq catppuccin-flavor 'frappe)
(load-theme 'catppuccin t)
#+end_src

*** volatile-highlights
#+begin_src emacs-lisp
(require 'volatile-highlights)
(add-hook 'emacs-startup-hook #'volatile-highlights-mode)
#+end_src

*** cua-mode
#+begin_src emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src

*** projectile.el
#+begin_src emacs-lisp
(require 'projectile)
(add-hook 'emacs-startup-hook #'projectile-mode)
(defun format-string-in-list (str-list str-const format-spec)
  "Formats each string in STR-LIST according to FORMAT-SPEC."
  (mapcar (lambda (s) (format format-spec str-const s)) str-list))

(keymap-global-set "C-c p" #'projectile-command-map)
(with-eval-after-load 'projectile
  (setopt projectile-sort-order  'recently-active)
  (add-to-list 'projectile-project-root-files ".projectile")
  (setq projectile-project-search-path
        (format-string-in-list
         (split-string
          (shell-command-to-string "ghq list") "\n")
         (getenv "HOME")
         "%s/ghq/%s"))
  (add-to-list 'projectile-project-search-path "~/Documents/org-mode/")
  (projectile-discover-projects-in-search-path))
#+end_src

*** bufferlo.el
#+begin_src emacs-lisp
(require 'bufferlo)
(add-hook 'emacs-startup-hook #'bufferlo-mode)
#+end_src

*** expand region
#+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** undo-tree
#+begin_src emacs-lisp
(require 'undo-tree)
(add-hook 'emacs-startup-hook #'global-undo-tree-mode)
(with-eval-after-load 'undo-tree
  (keymap-global-set "C-x u" #'undo-tree-visualize)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
#+end_src

*** git-gutter.el
#+begin_src emacs-lisp
(require 'git-gutter)
(add-hook 'emacs-startup-hook #'global-git-gutter-mode)
#+end_src

*** rainbow-delimiters.el
#+begin_src emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

*** hl-line.el
#+begin_src emacs-lisp
(require 'hl-line)
(add-hook 'emacs-startup-hook #'global-hl-line-mode)
#+end_src
*** free-keys.el
#+begin_src emacs-lisp
(require 'free-keys)
#+end_src

*** puni.el
#+begin_src emacs-lisp
(require 'puni)
(add-hook 'emacs-startup-hook #'puni-global-mode)
(electric-pair-mode 1)
#+end_src

*** autorevert.el
#+begin_src emacs-lisp
(require 'autorevert)
(add-hook 'emacs-startup-hook #'global-auto-revert-mode)
#+end_src

*** simple
#+begin_src emacs-lisp
  (require 'simple)
  (with-eval-after-load 'simple
    (setopt kill-whole-line t)
    (setopt kill-read-only-ok t))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
(require 'doom-modeline)
(add-hook 'emacs-startup-hook #'doom-modeline-mode)
#+end_src

*** which-key
#+begin_src emacs-lisp
(require 'which-key)
(add-hook 'emacs-startup-hook #'which-key-mode)
#+end_src

*** magit
#+begin_src emacs-lisp
(require 'magit)
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
(require 'exec-path-from-shell)
(setopt exec-path-from-shell-variables '("PATH" "GOPATH" "JAVA_HOME" "SHELL" "COPILOT_LANGUAGE_SERVER_PATH"))
(exec-path-from-shell-initialize)
#+end_src

*** olivetti-mode

#+begin_src emacs-lisp
(require 'olivetti)
#+end_src

*** dashboard
#+begin_src emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(keymap-global-set "C-c d" #'dashboard-open)
#+end_src

*** gcmh
#+begin_src emacs-lisp
(require 'gcmh)
(with-eval-after-load 'gcmh
  (setq gcmh-verbose t))
#+end_src

*** beacon
#+begin_src emacs-lisp
(require 'beacon)
(with-eval-after-load 'beacon
  (beacon-mode 1))
#+end_src

*** recentf
#+begin_src emacs-lisp
(require 'recentf)
(with-eval-after-load 'recentf
  (setq refentf-max-saved-items 2000
        recentf-exclude '(".recentf" ".~undo-tree~")
        recentf-auto-cleanup 10
        recentf-auto-save-timer
        (run-with-idle-timer 30 t 'recentf-save-list))
  (recentf-mode 1))
#+end_src

*** dmacro
#+begin_src emacs-lisp
(setq dmacro-key (kbd "C-c e"))
(require 'dmacro)
(global-dmacro-mode t)
#+end_src
*** instant-maximized-window
#+begin_src emacs-lisp
(require 'instant-maximized-window)
(keymap-global-set "C-c m" #'window-temp-maximize)
#+end_src
*** symbol overlay
#+begin_src emacs-lisp
(require 'symbol-overlay)
#+end_src
*** color-idendifiers-mode
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+end_src
*** neotree
#+begin_src emacs-lisp
(require 'neotree)
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
        (file-name (buffer-file-name)))
    (neotree-toggle)
    (if project-dir
        (if (neo-global--window-exists-p)
            (progn
              (neotree-dir project-dir)
              (neotree-find file-name)))
      (message "Could not find git project root."))))
;(setq projectile-switch-project-action 'neotree-projectile-action)
(keymap-global-set "M-n" #'neotree-project-dir)

(with-eval-after-load 'major-mode-hydra 
  (major-mode-hydra-define neotree-mode
                    (:title "edit" :color blue :quit-key "q" :foreign-key warn :separator "-")
                    ("Navi"
                     (("u" neotree-select-up-node "Up")
                      ("g" neotree-refresh "Refresh")
                      ("Q" neotree-hide "Hide"))
                     "File"
                     (("a" neo-open-file-ace-window "Ace")
                      ("n" neotree-create-node "Create")
                      ("r" neotree-rename-node "Rename")
                      ("c" neotree-copy-node "Copy")
                      ("d" neotree-delete-node "Delete")
                      ("SPC" neotree-quick-look))
                     "Toggle"
                     (("z" neotree-stretch-toggle     "Size"        :toggle (not (neo-window--minimize-p)))
                      ("h" neotree-hidden-file-toggle "Hidden file" :toggle neo-buffer--show-hidden-file-p)))))
#+end_src
** Completion
*** corfu
#+begin_src emacs-lisp
(require 'corfu)
(corfu-popupinfo-mode 1)
(corfu-history-mode 1)
(add-hook 'emacs-startup-hook #'global-corfu-mode)
(with-eval-after-load 'corfu
  (setq corfu-auto t
        corfu-auto-delay 0.1
        corfu-cycle t
        corfu-auto-prefix 3
        text-mode-ispell-word-completion nil
        corfu-popupinfo-delay 0.3))
#+end_src

*** cape
#+begin_src emacs-lisp
(defvar completion-at-point-functions '(tags-completion-at-point-function))
(require 'cape)
(add-to-list 'completion-at-point-functions #'cape-dabbrev)
(add-to-list 'completion-at-point-functions #'cape-dict)
(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-history)
(add-to-list 'completion-at-point-functions #'cape-elisp-block)
(add-to-list 'completion-at-point-functions #'cape-tex)
(add-to-list 'completion-at-point-functions #'cape-emoji)
#+end_src

*** nerd-icons-corfu
#+begin_src emacs-lisp
(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
#+end_src
*** vertico
#+begin_src emacs-lisp
(savehist-mode)
(require 'vertico)
(add-hook 'emacs-startup-hook #'vertico-mode)
(advice-add #'vertico--setup :after
            (lambda (&rest _)
              (setq-local completion-auto-help nil
                          completion-show-inline-help nil)))
#+end_src

*** marginalia
#+begin_src emacs-lisp
(require 'marginalia)
(add-hook 'emacs-startup-hook #'marginalia-mode)
#+end_src

*** avy
#+begin_src emacs-lisp
(require 'avy)
(require 'avy-zap)
#+end_src

*** consult
#+begin_src emacs-lisp
(defvar my-consult--source-buffer
  `(:name "Other Buffers"
    :narrow   ?b
    :category buffer
    :face     consult-buffer
    :history  buffer-name-history
    :state    ,#'consult--buffer-state
    :items ,(lambda () (consult--buffer-query
                        :predicate #'bufferlo-non-local-buffer-p
                        :sort 'visibility
                        :as #'buffer-name)))
    "Non-local buffer candidate source for `consult-buffer'.")

(defvar my-consult--source-local-buffer
  `(:name "Local Buffers"
    :narrow   ?l
    :category buffer
    :face     consult-buffer
    :history  buffer-name-history
    :state    ,#'consult--buffer-state
    :default  t
    :items ,(lambda () (consult--buffer-query
                        :predicate #'bufferlo-local-buffer-p
                        :sort 'visibility
                        :as #'buffer-name)))
    "Local buffer candidate source for `consult-buffer'.")
(defun c/consult-line (&optional at-point)
    "Consult-line uses things-at-point if set C-u prefix."
    (interactive "P")
    (if at-point
        (consult-line (thing-at-point 'symbol))
      (consult-line)))

(require 'consult)
#+end_src

*** embark
#+begin_src emacs-lisp
(require 'embark)
(keymap-global-set "C-." #'embark-act)
(keymap-global-set "C-;" #'embark-dwim)

(add-to-list 'display-buffer-alist
             '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
               nil
               (window-parameters (mode-line-format . none))))

(require 'embark-consult)

(defun embark-which-key-indicator ()
  "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
  (lambda (&optional keymap targets prefix)
    (if (null keymap)
        (which-key--hide-popup-ignore-command)
      (which-key--show-keymap
       (if (eq (plist-get (car targets) :type) 'embark-become)
           "Become"
         (format "Act on %s '%s'%s"
                 (plist-get (car targets) :type)
                 (embark--truncate-target (plist-get (car targets) :target))
                 (if (cdr targets) "…" "")))
       (if prefix
           (pcase (lookup-key keymap prefix 'accept-default)
             ((and (pred keymapp) km) km)
             (_ (key-binding prefix 'accept-default)))
         keymap)
       nil nil t (lambda (binding)
                   (not (string-suffix-p "-argument" (cdr
binding))))))))

(setq embark-indicators
  '(embark-which-key-indicator
    embark-highlight-indicator
    embark-isearch-highlight-indicator))

(defun embark-hide-which-key-indicator (fn &rest args)
  "Hide the which-key indicator immediately when using the completing-read prompter."
  (which-key--hide-popup-ignore-command)
  (let ((embark-indicators
         (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

(advice-add #'embark-completing-read-prompter
            :around #'embark-hide-which-key-indicator)
#+end_src

*** affe
#+begin_src emacs-lisp
(require 'affe)
(with-eval-after-load 'affe
  (setopt affe-highlight-function 'orderless-highlight-matches)
  (setopt affe-regexp-function 'orderless-pattern-compiler))
#+end_src

*** orderless
#+begin_src emacs-lisp
(require 'orderless)
(with-eval-after-load 'minibuffer
  ;; config
  (add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions
                                                    "Completion of multiple components, in any order."))
  (setopt completion-styles '(orderless initials flex basic))
  (setopt completion-category-overrides '((file (styles flex basic partial-completion)))))
#+end_src

*** yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(add-hook 'emacs-startup-hook #'yas-global-mode)

(require 'consult-yasnippet)
(keymap-global-set "C-c y" #'consult-yasnippet)
(keymap-global-set "C-c C-y" #'consult-yasnippet)
#+end_src
** org-mode
*** org-mode
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org-mode")

(defun create-new-org-file (path)
  (let ((name (read-string "Name: ")))
    (expand-file-name (format "%s.org"
                              name) path)))

(require 'org)
(with-eval-after-load 'org
  (setq org-startup-folded 'content
        org-deadline-warning-day  30
        org-enforce-todo-dependencies t
        org-html-htmlize-output-type 'inline-css
        org-html-htmlize-output-type nil
        org-html-htmlize-output-type 'css
        org-adapt-indentation t
        org-hide-leading-stars t
        org-hide-emphasis-markers t
        org-pretty-entities t
	    org-ellipsis "  ·"
        org-src-fontify-natively t
	    org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-lowest-priority ?F  ;; Gives us priorities A through F
        org-default-priority ?E ;; If an item has no priority, it is considered [#E].
        org-use-sub-superscripts '{}
        org-export-with-sub-superscripts nil
        org-priority-faces '((65 . "#BF616A")
                             (66 . "#EBCB8B")
                             (67 . "#B48EAD")
                             (68 . "#81A1C1")
                             (69 . "#5E81AC")
          (70 . "#4C566A"))
        org-todo-keywords
        '((sequence "TODO(t)" "DOING(n)" "WAIT(w)" "|" "DONE(d)"))
        org-todo-keyword-faces
        '(("TODO"   :foreground "#A3BE8C" :weight bold)
          ("DOING"  :foreground "#88C0D0" :weight bold)
		  ("WAIT"   :foreground "#88C0D0" :weight bold)
          ("DONE"   :foreground "#ff40ff" :weight bold))
        org-tag-alist '(("Lab" . ?l) ("RA" . ?r) ("Private" . ?p))
        org-global-properties '(("Effort_ALL" . "0 0:30 1:00 1:30 2:00 2:30")))
  
  (add-hook 'org-mode-hook 'visual-line-mode)

  (dolist (face '((org-level-1 . 1.35)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))))
#+end_src

*** org-capture
#+begin_src emacs-lisp
(setq org-memo-file (format "%s/memo.org" org-directory)
      org-prj-dir (format "%s/projects" org-directory))

(with-eval-after-load 'org
  (setq org-capture-templates 
        '(("m" "Memo" entry (file org-memo-file) "** %U\n%?\n" :empty-lines 1)
          ("t" "Tasks" entry (file+datetree org-daily-todo-file) "** TODO %?")
          ("p" "Projects" entry (file
                                 (lambda () (create-new-org-file
                                             org-prj-dir)))
           "\n* %? ")
          ("f" "Feelings" entry (file
                                 (lambda () (create-new-org-file
                                             (format "%s/feeling" org-directory))))
           "\n* %? ")))
  (keymap-global-set "C-c c" #'org-capture))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(require 'org-roam)
(setq org-roam-db-update-method 'immediate
      org-roam-db-location (format "%s/org-roam.db" org-directory)
      org-roam-directory (format "%s/org-roam" org-directory)
      org-roam-index-file (format "%s/index.org" org-directory))
(org-roam-db-autosync-mode)
(keymap-global-set "C-c n f" #'org-roam-node-find)
(keymap-global-set "C-c n i" #'org-roam-node-insert)
(keymap-global-set "C-c n t" #'org-roam-tag-add)
(keymap-global-set "C-c n a" #'org-roam-alias-add)
#+end_src

*** org-indent
#+begin_src emacs-lisp
(require 'org-indent)
(add-hook 'org-mode-hook #'org-indent-mode)
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-block nil            :foreground nil :inherit
                    'fixed-pitch :height 1.0)
(set-face-attribute 'org-code nil             :inherit '(shadow fixed-pitch) :height 0.85)
(set-face-attribute 'org-indent nil           :inherit '(org-hide fixed-pitch) :height 0.85)
(set-face-attribute 'org-verbatim nil         :inherit '(shadow fixed-pitch) :height 0.85)
(set-face-attribute 'org-special-keyword nil  :inherit '(font-lock-comment-face
                                                         fixed-pitch))
(set-face-attribute 'org-meta-line nil        :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil         :inherit 'fixed-pitch)
(add-hook 'org-mode-hook 'variable-pitch-mode)
(plist-put org-format-latex-options :scale 2)
#+end_src
*** org-superstar
#+begin_src emacs-lisp
(require 'org-superstar)
(add-hook 'org-mode-hook #'org-superstar-mode)
(with-eval-after-load 'org-superstar
  (setopt org-superstart-special-todo-items " ")
  (setopt org-superstart-special-todo-items t))
#+end_src

*** org-babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
'org-babel-load-languages
'((python . t)
  (shell . t)))

(setq org-babel-python-command "../.venv/bin/python")
(require 'ob-core)
(with-eval-after-load 'ob-core
  (setopt org-confirm-babel-evaluate nil)
  (setopt org-babel-default-header-args '((:session . "none")
                                          (:results . "drawer replace")
                                          (:exports . "code")
                                          (:cache . "no")
                                          (:noweb . "no")
                                          (:hlines . "no")
                                          (:tangle . "no"))))
(with-eval-after-load 'ob-lisp
  (defalias 'org-babel-execute:common-lisp 'org-babel-execute:lisp))
#+end_src
*** org-super-agenda
#+begin_src emacs-lisp
;(autoload-if-found '(org-agenda) "org-super-agenda" nil t)
(require 'org-super-agenda)
(org-super-agenda-mode t)
#+end_src
*** org-agenda
#+begin_src emacs-lisp
(require 'org-agenda)

(with-eval-after-load 'org
  (setq org-agenda-custom-commands 
        '(("x" "Unscheduled Tasks" tags-todo
           "-SCHEDULED>=\"<today>\"-DEADLINE>=\"<today>\"" nil)
          ("v" "My super agenda"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today's Log"
                                  :time-grid t
                                  :date today
                                  :scheduled today
                                  :order 1)
                           (:discard (:anything t))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "今日締切のタスク"
                                   :deadline today
                                   :order 2)
                            (:name "今日予定のタスク"
                                   :scheduled today
                                   :order 3)
                            (:name "締切を過ぎたタスク"
                                   :deadline past
                                   :order 4)
                            (:name "予定が近いタスク"
                                   :deadline future
                                   :order 5)
                            (:name "研究室のTODO"
                                   :tag "Lab"
                                   :order 6)
                            (:name "RAのTODO"
                                   :tag "RA"
                                   :order 7)
                            (:name "PrivateのTODO"
                                   :tag "Private"
                                   :order 7)
                            )))))))

        org-agenda-start-on-weekday 3
        org-agenda-span 'week
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-return-follows-link t  ;; RET to follow link
        org-agenda-time-grid
        '((daily today require-timed)
          (0900 1200 1300 1800) "......" "----------------")
        org-columns-default-format
        "%68ITEM(Task) %6Effort(Effort){:} %6CLOCKSUM(Clock){:}"
        org-clock-out-remove-zero-time-clocks t
        org-agenda-use-time-grid t
        org-clock-clocked-in-display 'both
        org-agenda-start-with-log-mode t
        org-agenda-files (list org-directory org-prj-dir org-roam-directory)
        org-agenda-archives-mode t))

(plist-put org-format-latex-options :scale 1.2)
(keymap-global-set "C-c a" #'org-agenda)
#+end_src

*** org-pomodoro
#+begin_src emacs-lisp
(require 'org-pomodoro)
;(keymap-global-set "M-p" #'org-pomodoro)
; (global-unset-key (kbd "M-p"))
(with-eval-after-load 'org-pomodoro
  (setopt org-pomodoro-play-sournds  nil)
  (setopt org-pomodoro-finished-sound-p nil)
  (setopt org-pomodoro-short-break-sound-p nil)
  (setopt org-pomodoro-long-break-sound-p nil)
  (setopt org-pomodoro-manual-break nil)
  (setopt org-pomodoro-format "Working %s")
  (setopt org-pomodoro-length 25)
  (setopt org-pomodoro-short-break-length 5))

(defun org-pomodoro-kill ()
  "Kill the current timer, reset the phase and update the modeline."
  (org-clock-out)
  (org-pomodoro-killed))
#+end_src

*** ox-gfm
#+begin_src emacs-lisp
(require 'ox-gfm)
#+end_src

*** ox-hugo

#+begin_src emacs-lisp
(require 'ox-hugo)
#+end_src
*** org-hydra
#+begin_src emacs-lisp
(defun my:org-goto-project ()
    (interactive)
    (find-file org-project-file))
(defun my:org-goto-memo ()
    (interactive)
    (find-file org-memo-file))
(defun my:org-goto-exp ()
    (interactive)
    (find-file org-exp-file))


(major-mode-hydra-define org-mode
  (:title "org mode":color blue :quit-key "q" :foreign-keys warn :separator "╌")
  ("visit file"
   (("m" my:org-goto-memo "memo"))
   "agenda"
   (("c" org-capture "capture"))
   "insert"
   (("h" org-insert-heading "header"))))
#+end_src
** lsp

*** lsp-mode
#+begin_src emacs-lisp
(defun my/lsp-mode-completion ()
   (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
         '(orderless)))

(require 'lsp-mode)

(defcustom lsp-client-packages
  '(lsp-copilot lsp-dockerfile lsp-go lsp-golangci-lint 
     lsp-json lsp-latex lsp-lua lsp-fennel lsp-magik lsp-markdown 
     lsp-nix lsp-pyright lsp-python-ty lsp-rust lsp-tex lsp-lua)
  "List of the clients to be automatically required."
  :group 'lsp-mode
  :type '(repeat symbol))

(setq lsp-server-install-dir (format "%s/.nix-profile/bin" (getenv "HOME")))

(with-eval-after-load 'lsp-mode
  (setopt lsp-enable-file-watchers nil)
  (setopt lsp-file-watch-threshold 500)
  (setopt lsp-completion-provider :none)
  (setq lsp-enable-suggest-server-download nil))
#+end_src
*** lsp-booster
#+begin_src emacs-lisp
(setq read-process-output-max (* 5 1024 1024)) ;; 10mb
(setq gc-cons-threshold 200000000)

(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
(require 'lsp-ui)

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-ui-mode))
(with-eval-after-load 'lsp-ui
  ;; (setopt lsp-ui-sideline-show-diagnostics t)
  ;; (setopt lsp-ui-sideline-show-code-actions  t)
  ;; (setopt lsp-ui-sideline-update-mode t)
  (setopt lsp-ui-doc-enable t)
  (setopt lsp-ui-doc-position 'top)
  (setopt lsp-ui-doc-side 'right)
  (setopt lsp-ui-doc-show-with-cursor t)
  (setopt lsp-ui-doc-show-with-mouse nil)
  (setopt lsp-ui-imenu-auto-refresh t)
  (pretty-hydra-define lsp-mode
    (:title "LSP" :color blue :quit-key "q" :foreign-keys warn :separator "╌")
   ("peek"
    (("d" lsp-ui-peek-find-definitions "definitions")
     ("r" lsp-ui-peek-find-references "references")
     ("b" xref-go-back "go back to previous location"))
    "code action"
    (("n" lsp-rename "rename")
     ("c" lsp-execute-code-action "code action")
     ("p" lsp-ui-peek "peek"))))
  (keymap-global-set "C-c l" #'lsp-mode/body))

#+end_src

*** flycheck
#+begin_src emacs-lisp
; grammar check
(require 'flycheck)
(add-hook 'emacs-startup-hook #'global-flycheck-mode)
#+end_src

#+begin_src emacs-lisp
(require 'highlight-indent-guides)
(add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
#+end_src
** program
*** dap-mode
#+begin_src emacs-lisp
(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
*** python mode
#+begin_src emacs-lisp
; python
(add-hook 'python-mode-hook #'lsp)
(add-hook 'python-mode-hook #'ruff-format-on-save-mode)

(require 'python-mode)
(require 'lsp-pyright)
(require 'pet)

(add-to-list 'auto-mode-alist '("\\.py$" . python-mode))

(with-eval-after-load 'python-mode
  (keymap-global-set "C-c C-p" nil))

(with-eval-after-load 'pet
  (pet-mode)
  (setq-local python-shell-interpreter (pet-executable-find "python"))
  (setq-local python-shell-virtualenv-root (pet-virtualenv-root))
  (setq-local lsp-pyright-venv-path python-shell-virtualenv-root)
  (setq-local lsp-pyright-python-executable-cmd python-shell-interpreter)
  (setq-local lsp-ruff-python-path python-shell-interpreter)
  (when-let ((ruff-executable (pet-executable-find "ruff")))
                (setq-local ruff-format-command ruff-executable)
                (ruff-format-on-save-mode))
  (pet-flycheck-setup)
  (setopt lsp-pyright-disable-tagged-hints t)
  (setopt lsp-pyright-basedpyright-inlay-hints-variable-types nil))

(require 'dap-python)
;; if you installed debugpy, you need to set this
;; https://github.com/emacs-lsp/dap-mode/issues/306
(setq dap-python-debugger 'debugpy)
#+end_src

*** rust mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))
(add-hook 'rust-mode-hook #'lsp)
(add-hook 'rust-mode-hook  #'cargo-minor-mode)
(require 'rust-mode)

(with-eval-after-load 'rust-mode
  (setq rust-format-on-save t))
#+end_src
*** yaml mode
#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
#+end_src

*** nix mode
#+begin_src emacs-lisp
(require 'nix-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
(add-hook 'nix-mode-hook #'lsp)
#+end_src

*** dockerfile mode
#+begin_src emacs-lisp
(require 'dockerfile-mode)

(add-to-list 'auto-mode-alist '("\\Dockerfile$" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\Dockerfile_Ecs$" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\Dockerfile_EcsDeploy" . dockerfile-mode))

(with-eval-after-load 'dockerfile-mode
  ;; hooks
  (add-hook 'dockerfile-mode-hook #'flycheck-mode))
#+end_src

*** copilot mode
#+begin_src emacs-lisp
(require 'copilot)
(add-hook 'prog-mode-hook #'copilot-mode)
;(setopt copilot-server-executable (getenv "COPILOT_LANGUAGE_SERVER_PATH"))
(setq copilot-indent-offset-warning-disable t)
(with-eval-after-load 'copilot-mode
  (keymap-global-set "C-<tab>" #'copilot-accept-completion)
  (add-to-list 'copilot-indentation-alist '(prog-mode . 2))
  (add-to-list 'copilot-indentation-alist '(org-mode . 2))
  (add-to-list 'copilot-indentation-alist '(text-mode . 2))
  (add-to-list 'copilot-indentation-alist '(closure-mode . 2))
  (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode . 2)))
#+end_src

*** markdown
#+begin_src emacs-lisp
(require 'markdown-mode)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
#+end_src

*** webmode
#+begin_src emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

*** yaml mode
#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
#+end_src

*** toml mode
#+begin_src emacs-lisp
(require 'toml-mode)
(add-to-list 'auto-mode-alist '("\\.toml\\'" . toml-mode))
#+end_src

*** lua mode
#+begin_src emacs-lisp
(require 'lua-mode)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
(add-hook 'lua-mode-hook #'lsp)

; lua-language-serverにおいて必要な設定
(setq lsp-clients-lua-language-server-command "lua-language-server"
      lsp-clients-lua-language-server-bin (format "%s/.nix-profile/bin/lua-language-server" (getenv "HOME"))
      lsp-clients-lua-language-server-main-location (format "%s/.lua-language-server/main.lua" (getenv "HOME")))
; reference : https://github.com/emacs-lsp/lsp-mode/issues/4688#issuecomment-3138937688

(defun my/lsp-clients-lua-language-server-test ()
  "(Improved) Test Lua language server binaries and files."
  (or (and (f-exists? lsp-clients-lua-language-server-main-location)
           (f-exists? lsp-clients-lua-language-server-bin))
      (f-exists? (car (split-string lsp-clients-lua-language-server-command)))))

(advice-add #'lsp-clients-lua-language-server-test
            :override #'my/lsp-clients-lua-language-server-test)
#+end_src

** latex
*** texlab
#+begin_src emacs-lisp
(require 'lsp-latex)
(add-hook 'yatex-mode-hook #'lsp)
#+end_src
*** yatex
#+begin_src emacs-lisp
(require 'yatex)
(add-to-list 'auto-mode-alist '("\\.tex$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.ltx$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.cls$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.sty$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.clo$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.bbl$" . yatex-mode))
(add-to-list 'auto-mode-alist '("\\.bib$" . yatex-mode))

(add-hook 'yatex-mode-hook #'yas-minor-mode)

(with-eval-after-load 'yatex
  (setopt YaTeX-inhibit-prefix-letter  t)
  (setopt tex-command  "platex -kanji=utf8")
  (setopt YaTeX-dvi2-command-ext-alist
     '(("Skim" . ".pdf")))
  (setopt dvi2-command "open -a Skim")
  (setopt tex-pdfview-command "open -a Skim")
  (major-mode-hydra-define yatex-mode
     (:title "Yatex" :color blue :quit-key "q" :foreign-keys warn :separator "╌")
   ("reftex"
    (("r" reftex-citation "references")
     ("t" reftex-toc "toc"))
    "yatex"
    (("m" YaTeX-typeset-menu "typeset")
     ("b" YaTeX-make-begin-end "begin env")
     ("s" YaTeX-make-section "section env")))))
#+end_src

*** flyspell
#+begin_src emacs-lisp
(require 'flyspell)
(add-hook 'yatex-mode-hook #'flyspell-mode)
#+end_src

*** reftex

#+begin_src emacs-lisp
(require 'reftex)
(add-to-list 'yatex-mode-hook #'reftex-mode)
(add-hook 'yatex-mode-hook
		#'(lambda ()
		(setq reftex-default-bibliography
        (directory-files-recursively (projectile-project-root) "\\.bib$"))))
;(with-eval-after-load 'reftex
;  (setq reftex-default-bibliography
;        (directory-files-recursively (projectile-project-root) "\\.bib$")))
#+end_src

** ddskk
#+begin_src emacs-lisp
(require 'ddskk-autoloads)
(keymap-global-set "C-x j" #'skk-mode)
(keymap-global-set "C-x C-j" #'skk-mode)
(setq default-input-method "japanese-skk")

(defvar skk-azik-keyboard-specific-additional-rom-kana-rule-list
 '(("l" nil skk-toggle-characters)
              ("x@" nil skk-today)
              ("~" nil skk-set-henkan-point-subr)
              ("x~" nil "~")
              (":" nil "ー")))

(defun skk-open-server-decoding-utf-8 ()
  "辞書サーバと接続する。サーバープロセスを返す。 decoding coding-system が euc ではなく utf8 となる。"
  (unless (skk-server-live-p)
    (setq skkserv-process (skk-open-server-1))
    (when (skk-server-live-p)
      (let ((code (cdr (assoc "euc" skk-coding-system-alist))))
	(set-process-coding-system skkserv-process 'utf-8 code))))
  skkserv-process)

(setq skk-mode-hook
      '(lambda()
         (advice-add 'skk-open-server :override 'skk-open-server-decoding-utf-8)))

(setq skk-preload t)

(with-eval-after-load 'skk
  (keymap-global-set "C-l" #'skk-latin-mode))

(with-eval-after-load 'skk-vars
  (setq skk-large-jisyo "~/.skk-dict/SKK-JISYO.L"
        skk-use-azik t
        skk-azik-keyboard-type "en"
        skk-search-katakana nil
        skk-share-private-jisyo t
        skk-save-jisyo-instantly t
        skk-server-host "localhost"
        skk-server-portnum 1178))

(require 'ddskk-posframe)

(with-eval-after-load 'skk
  ;; hooks
  (add-hook 'skk-mode-hook #'ddskk-posframe-mode))
#+END_SRC

** LLM (ellama)
#+begin_src emacs-lisp
(require 'ellama)
(with-eval-after-load 'ellama
  (setopt ellama-language "Japanese"))
#+end_src

** hydra menu 
#+begin_src emacs-lisp
(pretty-hydra-define hydra-goto
  (:title "↗ Goto" :color blue :quit-key "q" :foreign-keys warn :separator "╌")
   ("Got"
    (("i" avy-goto-char       "char")
     ("t" avy-goto-char-timer "timer")
     ("l" avy-goto-line       "line")
     ("j" avy-resume          "resume"))
    "Line"
    (("h" avy-goto-line        "head")
     ("e" avy-goto-end-of-line "end")
     ("n" consult-goto-line    "number"))
    "Topic"
    (("o"  consult-outline      "outline")
     ("m"  consult-imenu        "imenu")
     ("g" consult-global-imenu "global imenu"))
    "Error"
    ((","  lsp-bridge-diagnostic-jump-prev "previous")
     ("."  lsp-bridge-diagnostic-jump-next "next")
     ("L"  lsp-bridge-diagnostic-list "list"))
    "Spell"
    ((">"  flyspell-goto-next-error "next" :exit nil)
     ("cc" flyspell-correct-at-point "correct" :exit nil))))
(keymap-global-set "M-j" #'hydra-goto/body)
#+end_src

#+begin_src emacs-lisp
(pretty-hydra-define hydra-edit
  (:title "edit" :color blue :quit-key "q" :foreign-key warn :separator "-")
  ("Puni"
   (("f" puni-slurp-forward "forward" :exit nil)
    ("b" puni-barf-forward "backward" :exit nil)
    ("r" puni-wrap-round "round" :exit nil)
    ("s" puni-slice "slice" :exit nil)
    ("R" puni-raise "raise" :exit nil)
    ("u" puni-splice-killing-backward "kill backward" :exit nil)
    ("z" puni-squeeze "squeeze" :exit nil))
   "String"
   (("S" replace-string "replace")
    ("U" undo-tree-visualize "undo"))
   "Macros"
   (("i" reload-init-file "reload init.el")
    ("d" dmacro-exec "exec dmacro" :exit nil))))
(keymap-global-set "C-M-;" #'hydra-edit/body)
#+end_src

#+begin_src emacs-lisp
(pretty-hydra-define hydra-toggle2
  (:title " Toggle" :color blue :quit-key "q" :foreign-keys warn :separator "-")
   ("Basic"
    (("v" view-mode "view mode" :toggle t)
     ("w" whitespace-mode "whitespace" :toggle t)
     ("W" whitespace-cleanup "whitespace cleanup")
     ("r" rainbow-mode "rainbow" :toggle t)
     ("b" beacon-mode "beacon" :toggle t)
     ("o" olivetti-mode "olivetti" :toggle t))
    "Line & Column"
    (("l" toggle-truncate-lines "truncate line" :toggle t)
     ("n" display-line-numbers-mode "line number" :toggle t)
     ("F" display-fill-column-indicator-mode "column indicator" :toggle t)
     ("f" visual-fill-column-mode "visual column" :toggle t)
     ("c" toggle-visual-fill-column-center "fill center"))
    "Highlight"
    (("h" highlight-symbol "highligh symbol" :toggle t)
     ("L" hl-line-mode "line" :toggle t)
     ("t" hl-todo-mode "todo" :toggle t)
     ("g" git-gutter-mode "git gutter" :toggle t)
     ("i" highlight-indent-guides-mode "indent guide" :toggle t))
    "Window"
    (("t" toggle-window-transparency "transparency" :toggle t)
     ("m" toggle-window-maximize "maximize" :toggle t)
     ("p" presentation-mode "presentation" :toggle t))))
(keymap-global-set "M-t" #'hydra-toggle2/body)
#+end_src

#+begin_src emacs-lisp
(pretty-hydra-define hydra-search
  (:title "🔍 Search" :color blue :quit-key "q" :foreign-keys warn :separator "╌")
   ("Buffer"
    (("l" consult-line "line")
     ("o" consult-outline "outline")
     ("m" consult-imenu "imenu"))
    "Project"
    (("f" affe-find "find")
     ("r" affe-grep "grep"))
    "Document"
    (("df" consult-find "find")
     ("dd" consult-grep "grep"))))
(keymap-global-set "C-s" #'hydra-search/body)
#+end_src

#+begin_src emacs-lisp
(pretty-hydra-define hydra-git
  (:title " Git" :color blue :quit-key "q" :foreign-keys warn :separator "╌")
   ("Basic"
    (("w" magit-checkout "checkout")
     ("s" magit-status "status")
     ("b" magit-branch "branch")
     ("F" magit-pull "pull")
     ("f" magit-fetch "fetch")
     ("A" magit-apply "apply")
     ("c" magit-commit "commit")
     ("P" magit-push "push"))
    ""
    (("d" magit-diff "diff")
     ("l" magit-log "log")
     ("r" magit-rebase "rebase")
     ("z" magit-stash "stash")
     ("!" magit-run "run command")
     ("y" magit-show-refs "references"))
    "Hunk"
    (("," git-gutter:previous-hunk "previous" :exit nil)
     ("." git-gutter:next-hunk "next" :exit nil)
     ("g" git-gutter:stage-hunk "stage")
     ("v" git-gutter:revert-hunk "revert")
     ("p" git-gutter:popup-hunk "popup"))
    " GitHub"
    (("C" checkout-gh-pr "checkout PR")
     ("o" browse-at-remote-or-copy"browse at point")
     ("k" browse-at-remote-kill "copy url")
     ("O" (shell-command "hub browse") "browse repository"))))
(keymap-global-set "M-g" #'hydra-git/body)
(keymap-global-set "M-\'" #'major-mode-hydra)
#+end_src

** OJ
#+begin_src emacs-lisp
;; (require 'oj)
;; (setopt oj-home-dir
;;         (expand-file-name "~/ghq/github.com/keimoriyama/Atcoder/"))
#+end_src

